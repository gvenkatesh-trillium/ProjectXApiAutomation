<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="70" passed="59" failed="11" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-03-02T13:42:41Z" name="CRM API Automation Testing" finished-at="2020-03-02T13:46:43Z" duration-ms="242357">
    <groups>
      <group name="Membership.CreateContactActivatedAndValidated">
        <method signature="CPD.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" name="CreateContactActivatedAndValidated" class="com.api.tests.CPD"/>
        <method signature="Dialogs.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" name="CreateContactActivatedAndValidated" class="com.api.tests.Dialogs"/>
        <method signature="FundRaising.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" name="CreateContactActivatedAndValidated" class="com.api.tests.FundRaising"/>
        <method signature="GiftAid.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" name="CreateContactActivatedAndValidated" class="com.api.tests.GiftAid"/>
        <method signature="Membership.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" name="CreateContactActivatedAndValidated" class="com.api.tests.Membership"/>
      </group> <!-- Membership.CreateContactActivatedAndValidated -->
    </groups>
    <test started-at="2020-03-02T13:42:41Z" name="CRM API Tests" finished-at="2020-03-02T13:46:43Z" duration-ms="242357">
      <class name="com.api.tests.FundRaising">
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:43:08Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:11Z" duration-ms="2699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:43:08Z" name="beforeMethod" finished-at="2020-03-02T13:43:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:43:11Z" name="afterMethod" finished-at="2020-03-02T13:43:11Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=FundRaising.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:43:58Z" name="beforeMethod" finished-at="2020-03-02T13:43:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateDonation(java.lang.reflect.Method)[pri:1, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:43:58Z" name="CreateDonation" finished-at="2020-03-02T13:44:00Z" duration-ms="2286" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.CreateDonation(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateDonation -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:44:00Z" name="afterMethod" finished-at="2020-03-02T13:44:00Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateDonation status=SUCCESS method=FundRaising.CreateDonation(java.lang.reflect.Method)[pri:1, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateFundraisingDonation(java.lang.reflect.Method)[pri:2, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:45:18Z" name="CreateFundraisingDonation" finished-at="2020-03-02T13:45:25Z" depends-on-methods="com.api.tests.FundRaising.CreateContactActivatedAndValidated" duration-ms="7009" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.CreateFundraisingDonation(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateFundraisingDonation -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:45:18Z" name="beforeMethod" finished-at="2020-03-02T13:45:18Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:45:25Z" name="afterMethod" finished-at="2020-03-02T13:45:25Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateFundraisingDonation status=SUCCESS method=FundRaising.CreateFundraisingDonation(java.lang.reflect.Method)[pri:2, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:34Z" name="beforeMethod" finished-at="2020-03-02T13:46:34Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="UpdateDonation(java.lang.reflect.Method)[pri:3, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:34Z" name="UpdateDonation" finished-at="2020-03-02T13:46:34Z" depends-on-methods="com.api.tests.FundRaising.CreateFundraisingDonation" duration-ms="818" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.UpdateDonation(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateDonation -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:34Z" name="afterMethod" finished-at="2020-03-02T13:46:34Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateDonation status=SUCCESS method=FundRaising.UpdateDonation(java.lang.reflect.Method)[pri:3, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateDonationDebitTransaction(java.lang.reflect.Method)[pri:4, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:34Z" name="CreateDonationDebitTransaction" finished-at="2020-03-02T13:46:37Z" depends-on-methods="com.api.tests.FundRaising.CreateFundraisingDonation" duration-ms="2840" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.CreateDonationDebitTransaction(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateDonationDebitTransaction -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:34Z" name="beforeMethod" finished-at="2020-03-02T13:46:34Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateDonationPaymentPlan(java.lang.reflect.Method)[pri:5, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:37Z" name="CreateDonationPaymentPlan" finished-at="2020-03-02T13:46:40Z" depends-on-methods="com.api.tests.FundRaising.CreateFundraisingDonation" duration-ms="2824" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.FundRaising.CreateDonationPaymentPlan(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.FundRaising.CreateDonationPaymentPlan(FundRaising.java:185)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateDonationPaymentPlan -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:37Z" name="afterMethod" finished-at="2020-03-02T13:46:37Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateDonationDebitTransaction status=SUCCESS method=FundRaising.CreateDonationDebitTransaction(java.lang.reflect.Method)[pri:4, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:37Z" name="beforeMethod" finished-at="2020-03-02T13:46:37Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.FundRaising@680d4a6a]" started-at="2020-03-02T13:46:40Z" name="afterMethod" finished-at="2020-03-02T13:46:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateDonationPaymentPlan status=FAILURE method=FundRaising.CreateDonationPaymentPlan(java.lang.reflect.Method)[pri:5, instance:com.api.tests.FundRaising@680d4a6a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.FundRaising -->
      <class name="com.api.tests.GenericCRM">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:11Z" name="beforeMethod" finished-at="2020-03-02T13:43:11Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:11Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:14Z" duration-ms="2606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method signature="GetAllContactRoles(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:14Z" name="GetAllContactRoles" finished-at="2020-03-02T13:43:15Z" duration-ms="1528" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.GetAllContactRoles(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetAllContactRoles -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:14Z" name="afterMethod" finished-at="2020-03-02T13:43:14Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=GenericCRM.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:14Z" name="beforeMethod" finished-at="2020-03-02T13:43:14Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="LogMemberValue(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:15Z" name="LogMemberValue" finished-at="2020-03-02T13:43:17Z" duration-ms="2052" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.LogMemberValue(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LogMemberValue -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:15Z" name="afterMethod" finished-at="2020-03-02T13:43:15Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetAllContactRoles status=SUCCESS method=GenericCRM.GetAllContactRoles(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:15Z" name="beforeMethod" finished-at="2020-03-02T13:43:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:17Z" name="afterMethod" finished-at="2020-03-02T13:43:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LogMemberValue status=SUCCESS method=GenericCRM.LogMemberValue(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="PayTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:17Z" name="PayTransaction" finished-at="2020-03-02T13:43:18Z" duration-ms="899" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.PayTransaction(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.GenericCRM.PayTransaction(GenericCRM.java:303)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PayTransaction -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:17Z" name="beforeMethod" finished-at="2020-03-02T13:43:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveAllBranches(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:18Z" name="RetrieveAllBranches" finished-at="2020-03-02T13:43:19Z" duration-ms="592" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveAllBranches(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAllBranches -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:18Z" name="afterMethod" finished-at="2020-03-02T13:43:18Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PayTransaction status=FAILURE method=GenericCRM.PayTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:18Z" name="beforeMethod" finished-at="2020-03-02T13:43:18Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="afterMethod" finished-at="2020-03-02T13:43:19Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAllBranches status=SUCCESS method=GenericCRM.RetrieveAllBranches(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="beforeMethod" finished-at="2020-03-02T13:43:19Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveAllPeriods(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="RetrieveAllPeriods" finished-at="2020-03-02T13:43:19Z" duration-ms="775" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveAllPeriods(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAllPeriods -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="afterMethod" finished-at="2020-03-02T13:43:19Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAllPeriods status=SUCCESS method=GenericCRM.RetrieveAllPeriods(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveCounties(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="RetrieveCounties" finished-at="2020-03-02T13:43:20Z" duration-ms="652" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveCounties(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCounties -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:19Z" name="beforeMethod" finished-at="2020-03-02T13:43:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:20Z" name="afterMethod" finished-at="2020-03-02T13:43:20Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCounties status=SUCCESS method=GenericCRM.RetrieveCounties(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:20Z" name="beforeMethod" finished-at="2020-03-02T13:43:20Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveCountries(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:20Z" name="RetrieveCountries" finished-at="2020-03-02T13:43:21Z" duration-ms="698" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveCountries(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCountries -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:21Z" name="afterMethod" finished-at="2020-03-02T13:43:21Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCountries status=SUCCESS method=GenericCRM.RetrieveCountries(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveEntities(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:21Z" name="RetrieveEntities" finished-at="2020-03-02T13:43:25Z" duration-ms="4074" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveEntities(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveEntities -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:21Z" name="beforeMethod" finished-at="2020-03-02T13:43:21Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:25Z" name="afterMethod" finished-at="2020-03-02T13:43:25Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveEntities status=SUCCESS method=GenericCRM.RetrieveEntities(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveMultiplesOptionsSet(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:25Z" name="RetrieveMultiplesOptionsSet" finished-at="2020-03-02T13:43:26Z" duration-ms="1222" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveMultiplesOptionsSet(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveMultiplesOptionsSet -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:25Z" name="beforeMethod" finished-at="2020-03-02T13:43:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:26Z" name="afterMethod" finished-at="2020-03-02T13:43:26Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveMultiplesOptionsSet status=SUCCESS method=GenericCRM.RetrieveMultiplesOptionsSet(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:26Z" name="beforeMethod" finished-at="2020-03-02T13:43:26Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveOptionSet(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:26Z" name="RetrieveOptionSet" finished-at="2020-03-02T13:43:27Z" duration-ms="646" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.RetrieveOptionSet(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveOptionSet -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:43:27Z" name="afterMethod" finished-at="2020-03-02T13:43:27Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveOptionSet status=SUCCESS method=GenericCRM.RetrieveOptionSet(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="GetContactRolesByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:44:17Z" name="GetContactRolesByContactId" finished-at="2020-03-02T13:44:18Z" depends-on-methods="com.api.tests.GenericCRM.CreateContactActivatedAndValidated" duration-ms="769" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GenericCRM.GetContactRolesByContactId(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetContactRolesByContactId -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:44:17Z" name="beforeMethod" finished-at="2020-03-02T13:44:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GenericCRM@309028af]" started-at="2020-03-02T13:44:18Z" name="afterMethod" finished-at="2020-03-02T13:44:18Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetContactRolesByContactId status=SUCCESS method=GenericCRM.GetContactRolesByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GenericCRM@309028af] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.GenericCRM -->
      <class name="com.api.tests.Dialogs">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:43:02Z" name="beforeMethod" finished-at="2020-03-02T13:43:02Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:43:02Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:06Z" duration-ms="3759" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:43:06Z" name="afterMethod" finished-at="2020-03-02T13:43:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=Dialogs.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:01Z" name="beforeMethod" finished-at="2020-03-02T13:44:01Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateDirectDebitMandate(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:01Z" name="CreateDirectDebitMandate" finished-at="2020-03-02T13:44:04Z" duration-ms="2648" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.CreateDirectDebitMandate(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateDirectDebitMandate -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:04Z" name="afterMethod" finished-at="2020-03-02T13:44:04Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateDirectDebitMandate status=SUCCESS method=Dialogs.CreateDirectDebitMandate(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:04Z" name="beforeMethod" finished-at="2020-03-02T13:44:04Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateTransactionAllInOne(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:04Z" name="CreateTransactionAllInOne" finished-at="2020-03-02T13:44:06Z" duration-ms="2756" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.CreateTransactionAllInOne(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Dialogs.CreateTransactionAllInOne(Dialogs.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateTransactionAllInOne -->
        <test-method signature="ExecuteMembershipBatch(java.lang.reflect.Method)[pri:4, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:06Z" name="ExecuteMembershipBatch" finished-at="2020-03-02T13:44:08Z" duration-ms="1112" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.ExecuteMembershipBatch(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:372)
	at org.testng.Assert.assertEquals(Assert.java:382)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:13)
	at com.api.tests.Dialogs.ExecuteMembershipBatch(Dialogs.java:155)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExecuteMembershipBatch -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:06Z" name="afterMethod" finished-at="2020-03-02T13:44:06Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateTransactionAllInOne status=FAILURE method=Dialogs.CreateTransactionAllInOne(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:06Z" name="beforeMethod" finished-at="2020-03-02T13:44:06Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:08Z" name="afterMethod" finished-at="2020-03-02T13:44:08Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ExecuteMembershipBatch status=FAILURE method=Dialogs.ExecuteMembershipBatch(java.lang.reflect.Method)[pri:4, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:08Z" name="beforeMethod" finished-at="2020-03-02T13:44:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="GetTransactionForMembership(java.lang.reflect.Method)[pri:6, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:08Z" name="GetTransactionForMembership" finished-at="2020-03-02T13:44:13Z" duration-ms="5181" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.GetTransactionForMembership(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetTransactionForMembership -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:13Z" name="afterMethod" finished-at="2020-03-02T13:44:13Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetTransactionForMembership status=SUCCESS method=Dialogs.GetTransactionForMembership(java.lang.reflect.Method)[pri:6, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:50Z" name="beforeMethod" finished-at="2020-03-02T13:44:50Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateMembershipFromDialog(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:50Z" name="CreateMembershipFromDialog" finished-at="2020-03-02T13:44:59Z" depends-on-methods="com.api.tests.Dialogs.CreateContactActivatedAndValidated" duration-ms="8146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.CreateMembershipFromDialog(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMembershipFromDialog -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:44:59Z" name="afterMethod" finished-at="2020-03-02T13:44:59Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMembershipFromDialog status=SUCCESS method=Dialogs.CreateMembershipFromDialog(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:25Z" name="beforeMethod" finished-at="2020-03-02T13:45:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="PayMultipleTransactions(java.lang.reflect.Method)[pri:5, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:25Z" name="PayMultipleTransactions" finished-at="2020-03-02T13:45:25Z" depends-on-methods="com.api.tests.Dialogs.CreateContactActivatedAndValidated" duration-ms="288" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.PayMultipleTransactions(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Dialogs.PayMultipleTransactions(Dialogs.java:209)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PayMultipleTransactions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:25Z" name="afterMethod" finished-at="2020-03-02T13:45:25Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PayMultipleTransactions status=FAILURE method=Dialogs.PayMultipleTransactions(java.lang.reflect.Method)[pri:5, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="ProcessDonation(java.lang.reflect.Method)[pri:5, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:25Z" name="ProcessDonation" finished-at="2020-03-02T13:45:33Z" depends-on-methods="com.api.tests.Dialogs.CreateContactActivatedAndValidated" duration-ms="7404" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Dialogs.ProcessDonation(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ProcessDonation -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:25Z" name="beforeMethod" finished-at="2020-03-02T13:45:25Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Dialogs@d5ce97f]" started-at="2020-03-02T13:45:33Z" name="afterMethod" finished-at="2020-03-02T13:45:33Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ProcessDonation status=SUCCESS method=Dialogs.ProcessDonation(java.lang.reflect.Method)[pri:5, instance:com.api.tests.Dialogs@d5ce97f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.Dialogs -->
      <class name="com.api.tests.Contact">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:42:51Z" name="beforeMethod" finished-at="2020-03-02T13:42:51Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:42:51Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:42:56Z" duration-ms="4358" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Contact.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:42:56Z" name="afterMethod" finished-at="2020-03-02T13:42:56Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=Contact.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Contact@13f9ad9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:44:47Z" name="beforeMethod" finished-at="2020-03-02T13:44:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="UpdateContact(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:44:47Z" name="UpdateContact" finished-at="2020-03-02T13:44:50Z" depends-on-methods="com.api.tests.Contact.CreateContactActivatedAndValidated" duration-ms="3378" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Contact.UpdateContact(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateContact -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:44:50Z" name="afterMethod" finished-at="2020-03-02T13:44:50Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateContact status=SUCCESS method=Contact.UpdateContact(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Contact@13f9ad9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveContact(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:45:17Z" name="RetrieveContact" finished-at="2020-03-02T13:45:18Z" depends-on-methods="com.api.tests.Contact.CreateContactActivatedAndValidated" duration-ms="769" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Contact.RetrieveContact(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveContact -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:45:17Z" name="beforeMethod" finished-at="2020-03-02T13:45:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:45:18Z" name="afterMethod" finished-at="2020-03-02T13:45:18Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveContact status=SUCCESS method=Contact.RetrieveContact(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Contact@13f9ad9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:46:33Z" name="beforeMethod" finished-at="2020-03-02T13:46:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CheckContactExists(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:46:33Z" name="CheckContactExists" finished-at="2020-03-02T13:46:34Z" depends-on-methods="com.api.tests.Contact.RetrieveContact" duration-ms="554" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Contact.CheckContactExists(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckContactExists -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Contact@13f9ad9]" started-at="2020-03-02T13:46:34Z" name="afterMethod" finished-at="2020-03-02T13:46:34Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckContactExists status=SUCCESS method=Contact.CheckContactExists(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Contact@13f9ad9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.Contact -->
      <class name="com.api.tests.Account">
        <test-method is-config="true" signature="setExtent()[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:42:41Z" name="setExtent" finished-at="2020-03-02T13:42:41Z" duration-ms="159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setExtent -->
        <test-method signature="RetrieveOrganisationsByName(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:43:57Z" name="RetrieveOrganisationsByName" finished-at="2020-03-02T13:43:58Z" duration-ms="719" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Account.RetrieveOrganisationsByName(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveOrganisationsByName -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:43:57Z" name="beforeMethod" finished-at="2020-03-02T13:43:57Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:43:58Z" name="afterMethod" finished-at="2020-03-02T13:43:58Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveOrganisationsByName status=SUCCESS method=Account.RetrieveOrganisationsByName(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Account@3ece1e79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="UpdateOrganisation(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:44:00Z" name="UpdateOrganisation" finished-at="2020-03-02T13:44:01Z" duration-ms="1223" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Account.UpdateOrganisation(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateOrganisation -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:44:00Z" name="beforeMethod" finished-at="2020-03-02T13:44:00Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:44:01Z" name="afterMethod" finished-at="2020-03-02T13:44:01Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateOrganisation status=SUCCESS method=Account.UpdateOrganisation(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Account@3ece1e79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:com.api.tests.Account@3ece1e79]" started-at="2020-03-02T13:46:42Z" name="endReport" finished-at="2020-03-02T13:46:43Z" duration-ms="660" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- com.api.tests.Account -->
      <class name="com.api.tests.Membership">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:32Z" name="beforeMethod" finished-at="2020-03-02T13:43:32Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="ApplyMembershipDiscountCodeForWeb(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:32Z" name="ApplyMembershipDiscountCodeForWeb" finished-at="2020-03-02T13:43:33Z" duration-ms="651" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.ApplyMembershipDiscountCodeForWeb(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Membership.ApplyMembershipDiscountCodeForWeb(Membership.java:205)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApplyMembershipDiscountCodeForWeb -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:33Z" name="afterMethod" finished-at="2020-03-02T13:43:33Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ApplyMembershipDiscountCodeForWeb status=FAILURE method=Membership.ApplyMembershipDiscountCodeForWeb(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:33Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:36Z" duration-ms="2673" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:33Z" name="beforeMethod" finished-at="2020-03-02T13:43:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:36Z" name="afterMethod" finished-at="2020-03-02T13:43:36Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=Membership.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:36Z" name="beforeMethod" finished-at="2020-03-02T13:43:36Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveActiveMembershipsByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:36Z" name="RetrieveActiveMembershipsByContactId" finished-at="2020-03-02T13:43:39Z" duration-ms="3392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveActiveMembershipsByContactId(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveActiveMembershipsByContactId -->
        <test-method signature="RetrieveAllMembershipTypes(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:39Z" name="RetrieveAllMembershipTypes" finished-at="2020-03-02T13:43:40Z" duration-ms="1076" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveAllMembershipTypes(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAllMembershipTypes -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:39Z" name="beforeMethod" finished-at="2020-03-02T13:43:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:39Z" name="afterMethod" finished-at="2020-03-02T13:43:39Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveActiveMembershipsByContactId status=SUCCESS method=Membership.RetrieveActiveMembershipsByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:40Z" name="afterMethod" finished-at="2020-03-02T13:43:40Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAllMembershipTypes status=SUCCESS method=Membership.RetrieveAllMembershipTypes(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:40Z" name="beforeMethod" finished-at="2020-03-02T13:43:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveAllMembershipsByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:40Z" name="RetrieveAllMembershipsByContactId" finished-at="2020-03-02T13:43:43Z" duration-ms="2431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveAllMembershipsByContactId(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAllMembershipsByContactId -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="afterMethod" finished-at="2020-03-02T13:43:43Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAllMembershipsByContactId status=SUCCESS method=Membership.RetrieveAllMembershipsByContactId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="beforeMethod" finished-at="2020-03-02T13:43:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveAllMethodsOfPayment(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="RetrieveAllMethodsOfPayment" finished-at="2020-03-02T13:43:43Z" duration-ms="625" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveAllMethodsOfPayment(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAllMethodsOfPayment -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="beforeMethod" finished-at="2020-03-02T13:43:43Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveMembershipBands(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="RetrieveMembershipBands" finished-at="2020-03-02T13:43:44Z" duration-ms="780" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveMembershipBands(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveMembershipBands -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:43Z" name="afterMethod" finished-at="2020-03-02T13:43:43Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAllMethodsOfPayment status=SUCCESS method=Membership.RetrieveAllMethodsOfPayment(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveMembershipGradesByTypeId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:44Z" name="RetrieveMembershipGradesByTypeId" finished-at="2020-03-02T13:43:53Z" duration-ms="8641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveMembershipGradesByTypeId(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveMembershipGradesByTypeId -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:44Z" name="beforeMethod" finished-at="2020-03-02T13:43:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:44Z" name="afterMethod" finished-at="2020-03-02T13:43:44Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveMembershipBands status=SUCCESS method=Membership.RetrieveMembershipBands(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:53Z" name="afterMethod" finished-at="2020-03-02T13:43:53Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveMembershipGradesByTypeId status=SUCCESS method=Membership.RetrieveMembershipGradesByTypeId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:53Z" name="beforeMethod" finished-at="2020-03-02T13:43:53Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveMembershipTransactions(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:53Z" name="RetrieveMembershipTransactions" finished-at="2020-03-02T13:43:56Z" duration-ms="3503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveMembershipTransactions(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveMembershipTransactions -->
        <test-method signature="RetrieveValidMembershipDiscountCodeForWeb(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:56Z" name="RetrieveValidMembershipDiscountCodeForWeb" finished-at="2020-03-02T13:43:57Z" duration-ms="594" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.RetrieveValidMembershipDiscountCodeForWeb(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Membership.RetrieveValidMembershipDiscountCodeForWeb(Membership.java:182)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveValidMembershipDiscountCodeForWeb -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:56Z" name="afterMethod" finished-at="2020-03-02T13:43:56Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveMembershipTransactions status=SUCCESS method=Membership.RetrieveMembershipTransactions(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:56Z" name="beforeMethod" finished-at="2020-03-02T13:43:56Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:43:57Z" name="afterMethod" finished-at="2020-03-02T13:43:57Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveValidMembershipDiscountCodeForWeb status=FAILURE method=Membership.RetrieveValidMembershipDiscountCodeForWeb(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:19Z" name="beforeMethod" finished-at="2020-03-02T13:44:19Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateFundraisingMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:19Z" name="CreateFundraisingMembership" finished-at="2020-03-02T13:44:41Z" depends-on-methods="com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="22268" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateFundraisingMembership(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Membership.CreateFundraisingMembership(Membership.java:300)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateFundraisingMembership -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:41Z" name="afterMethod" finished-at="2020-03-02T13:44:41Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateFundraisingMembership status=FAILURE method=Membership.CreateFundraisingMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:41Z" name="beforeMethod" finished-at="2020-03-02T13:44:41Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:41Z" name="CreateMembership" finished-at="2020-03-02T13:44:44Z" depends-on-methods="com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="3048" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateMembership(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMembership -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:44:44Z" name="afterMethod" finished-at="2020-03-02T13:44:44Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMembership status=SUCCESS method=Membership.CreateMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:34Z" name="beforeMethod" finished-at="2020-03-02T13:45:34Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateGenericMembershipTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:34Z" name="CreateGenericMembershipTransaction" finished-at="2020-03-02T13:45:38Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="3919" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateGenericMembershipTransaction(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateGenericMembershipTransaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:38Z" name="afterMethod" finished-at="2020-03-02T13:45:38Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateGenericMembershipTransaction status=SUCCESS method=Membership.CreateGenericMembershipTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateMembershipTransactionAndDirectDebit(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:38Z" name="CreateMembershipTransactionAndDirectDebit" finished-at="2020-03-02T13:45:54Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="15565" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateMembershipTransactionAndDirectDebit(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMembershipTransactionAndDirectDebit -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:38Z" name="beforeMethod" finished-at="2020-03-02T13:45:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:54Z" name="afterMethod" finished-at="2020-03-02T13:45:54Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMembershipTransactionAndDirectDebit status=SUCCESS method=Membership.CreateMembershipTransactionAndDirectDebit(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:54Z" name="beforeMethod" finished-at="2020-03-02T13:45:54Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateMembershipTransactionAndProcessPayment(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:45:54Z" name="CreateMembershipTransactionAndProcessPayment" finished-at="2020-03-02T13:46:03Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="9334" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateMembershipTransactionAndProcessPayment(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMembershipTransactionAndProcessPayment -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:03Z" name="beforeMethod" finished-at="2020-03-02T13:46:03Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateMembershipTransactionsAsInvoice(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:03Z" name="CreateMembershipTransactionsAsInvoice" finished-at="2020-03-02T13:46:12Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="9118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateMembershipTransactionsAsInvoice(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMembershipTransactionsAsInvoice -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:03Z" name="afterMethod" finished-at="2020-03-02T13:46:03Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMembershipTransactionAndProcessPayment status=SUCCESS method=Membership.CreateMembershipTransactionAndProcessPayment(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:12Z" name="afterMethod" finished-at="2020-03-02T13:46:12Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMembershipTransactionsAsInvoice status=SUCCESS method=Membership.CreateMembershipTransactionsAsInvoice(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:12Z" name="beforeMethod" finished-at="2020-03-02T13:46:12Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateMultipleMembershipInvoiceTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:12Z" name="CreateMultipleMembershipInvoiceTransaction" finished-at="2020-03-02T13:46:15Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="3119" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.CreateMultipleMembershipInvoiceTransaction(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.Membership.CreateMultipleMembershipInvoiceTransaction(Membership.java:481)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateMultipleMembershipInvoiceTransaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:15Z" name="afterMethod" finished-at="2020-03-02T13:46:15Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateMultipleMembershipInvoiceTransaction status=FAILURE method=Membership.CreateMultipleMembershipInvoiceTransaction(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:15Z" name="beforeMethod" finished-at="2020-03-02T13:46:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="LapseMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:15Z" name="LapseMembership" finished-at="2020-03-02T13:46:17Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="1775" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.LapseMembership(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LapseMembership -->
        <test-method signature="UpgradeMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:17Z" name="UpgradeMembership" finished-at="2020-03-02T13:46:30Z" depends-on-methods="com.api.tests.Membership.CreateMembership, com.api.tests.Membership.CreateContactActivatedAndValidated" duration-ms="13039" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Membership.UpgradeMembership(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpgradeMembership -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:17Z" name="beforeMethod" finished-at="2020-03-02T13:46:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:17Z" name="afterMethod" finished-at="2020-03-02T13:46:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LapseMembership status=SUCCESS method=Membership.LapseMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Membership@70101687]" started-at="2020-03-02T13:46:30Z" name="afterMethod" finished-at="2020-03-02T13:46:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpgradeMembership status=SUCCESS method=Membership.UpgradeMembership(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Membership@70101687] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.Membership -->
      <class name="com.api.tests.GiftAid">
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:27Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:29Z" duration-ms="2775" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GiftAid.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:27Z" name="beforeMethod" finished-at="2020-03-02T13:43:27Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:29Z" name="afterMethod" finished-at="2020-03-02T13:43:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=GiftAid.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="ProcessGiftAidBatch(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:29Z" name="ProcessGiftAidBatch" finished-at="2020-03-02T13:43:32Z" duration-ms="2911" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GiftAid.ProcessGiftAidBatch(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.GiftAid.ProcessGiftAidBatch(GiftAid.java:71)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ProcessGiftAidBatch -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:29Z" name="beforeMethod" finished-at="2020-03-02T13:43:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:43:32Z" name="afterMethod" finished-at="2020-03-02T13:43:32Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ProcessGiftAidBatch status=FAILURE method=GiftAid.ProcessGiftAidBatch(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateGiftAidDeclaration(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:44:18Z" name="CreateGiftAidDeclaration" finished-at="2020-03-02T13:44:19Z" depends-on-methods="com.api.tests.GiftAid.CreateContactActivatedAndValidated" duration-ms="1325" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.GiftAid.CreateGiftAidDeclaration(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateGiftAidDeclaration -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:44:18Z" name="beforeMethod" finished-at="2020-03-02T13:44:18Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.GiftAid@724c5cbe]" started-at="2020-03-02T13:44:19Z" name="afterMethod" finished-at="2020-03-02T13:44:19Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateGiftAidDeclaration status=SUCCESS method=GiftAid.CreateGiftAidDeclaration(java.lang.reflect.Method)[pri:0, instance:com.api.tests.GiftAid@724c5cbe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.GiftAid -->
      <class name="com.api.tests.Event">
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:43:06Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:43:08Z" duration-ms="2718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Event.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:43:06Z" name="beforeMethod" finished-at="2020-03-02T13:43:06Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:43:08Z" name="afterMethod" finished-at="2020-03-02T13:43:08Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=Event.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Event@7048535f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:44:59Z" name="beforeMethod" finished-at="2020-03-02T13:44:59Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateBookings(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:44:59Z" name="CreateBookings" finished-at="2020-03-02T13:45:17Z" depends-on-methods="com.api.tests.Event.CreateContactActivatedAndValidated" duration-ms="18615" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Event.CreateBookings(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateBookings -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Event@7048535f]" started-at="2020-03-02T13:45:17Z" name="afterMethod" finished-at="2020-03-02T13:45:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateBookings status=SUCCESS method=Event.CreateBookings(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Event@7048535f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.Event -->
      <class name="com.api.tests.CPD">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:56Z" name="beforeMethod" finished-at="2020-03-02T13:42:56Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:56Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:42:58Z" duration-ms="2697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:58Z" name="beforeMethod" finished-at="2020-03-02T13:42:58Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:58Z" name="afterMethod" finished-at="2020-03-02T13:42:58Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=CPD.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveCpdActivitiesByDiaryId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:58Z" name="RetrieveCpdActivitiesByDiaryId" finished-at="2020-03-02T13:42:59Z" duration-ms="931" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.RetrieveCpdActivitiesByDiaryId(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCpdActivitiesByDiaryId -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:59Z" name="afterMethod" finished-at="2020-03-02T13:42:59Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCpdActivitiesByDiaryId status=SUCCESS method=CPD.RetrieveCpdActivitiesByDiaryId(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveCpdActivityById(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:59Z" name="RetrieveCpdActivityById" finished-at="2020-03-02T13:43:00Z" duration-ms="752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.RetrieveCpdActivityById(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCpdActivityById -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:42:59Z" name="beforeMethod" finished-at="2020-03-02T13:42:59Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:00Z" name="afterMethod" finished-at="2020-03-02T13:43:00Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCpdActivityById status=SUCCESS method=CPD.RetrieveCpdActivityById(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="RetrieveCpdDiaries(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:00Z" name="RetrieveCpdDiaries" finished-at="2020-03-02T13:43:01Z" duration-ms="824" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.RetrieveCpdDiaries(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCpdDiaries -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:00Z" name="beforeMethod" finished-at="2020-03-02T13:43:00Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:01Z" name="afterMethod" finished-at="2020-03-02T13:43:01Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCpdDiaries status=SUCCESS method=CPD.RetrieveCpdDiaries(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:01Z" name="beforeMethod" finished-at="2020-03-02T13:43:01Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveCpdDiaryById(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:01Z" name="RetrieveCpdDiaryById" finished-at="2020-03-02T13:43:02Z" duration-ms="801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.RetrieveCpdDiaryById(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveCpdDiaryById -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:43:02Z" name="afterMethod" finished-at="2020-03-02T13:43:02Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveCpdDiaryById status=SUCCESS method=CPD.RetrieveCpdDiaryById(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:13Z" name="CreateCpdActivity" finished-at="2020-03-02T13:44:15Z" depends-on-methods="com.api.tests.CPD.CreateContactActivatedAndValidated" duration-ms="1909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.CreateCpdActivity(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateCpdActivity -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:13Z" name="beforeMethod" finished-at="2020-03-02T13:44:13Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:15Z" name="afterMethod" finished-at="2020-03-02T13:44:15Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateCpdActivity status=SUCCESS method=CPD.CreateCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="CreateCpdDiary(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:15Z" name="CreateCpdDiary" finished-at="2020-03-02T13:44:16Z" depends-on-methods="com.api.tests.CPD.CreateContactActivatedAndValidated" duration-ms="1605" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.CreateCpdDiary(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateCpdDiary -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:15Z" name="beforeMethod" finished-at="2020-03-02T13:44:15Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:16Z" name="afterMethod" finished-at="2020-03-02T13:44:16Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateCpdDiary status=SUCCESS method=CPD.CreateCpdDiary(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="UpdateCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:16Z" name="UpdateCpdActivity" finished-at="2020-03-02T13:44:17Z" depends-on-methods="com.api.tests.CPD.CreateContactActivatedAndValidated" duration-ms="645" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.UpdateCpdActivity(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.api.utils.VerifyResponse.validateAssertion(VerifyResponse.java:21)
	at com.api.tests.CPD.UpdateCpdActivity(CPD.java:164)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateCpdActivity -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:16Z" name="beforeMethod" finished-at="2020-03-02T13:44:16Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:44:17Z" name="afterMethod" finished-at="2020-03-02T13:44:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateCpdActivity status=FAILURE method=CPD.UpdateCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:45:33Z" name="beforeMethod" finished-at="2020-03-02T13:45:33Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="DeleteCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:45:33Z" name="DeleteCpdActivity" finished-at="2020-03-02T13:45:34Z" depends-on-methods="com.api.tests.CPD.CreateContactActivatedAndValidated, com.api.tests.CPD.CreateCpdActivity" duration-ms="1635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.CPD.DeleteCpdActivity(java.lang.reflect.Method) throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteCpdActivity -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.CPD@1b7cae6f]" started-at="2020-03-02T13:45:34Z" name="afterMethod" finished-at="2020-03-02T13:45:34Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeleteCpdActivity status=SUCCESS method=CPD.DeleteCpdActivity(java.lang.reflect.Method)[pri:0, instance:com.api.tests.CPD@1b7cae6f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.CPD -->
      <class name="com.api.tests.Address">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:42:41Z" name="beforeMethod" finished-at="2020-03-02T13:42:41Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:42:41Z" name="CreateContactActivatedAndValidated" finished-at="2020-03-02T13:42:51Z" duration-ms="10589" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Address.CreateContactActivatedAndValidated(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateContactActivatedAndValidated -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:42:51Z" name="afterMethod" finished-at="2020-03-02T13:42:51Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateContactActivatedAndValidated status=SUCCESS method=Address.CreateContactActivatedAndValidated(java.lang.reflect.Method)[pri:0, instance:com.api.tests.Address@ab20d7c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:44:44Z" name="beforeMethod" finished-at="2020-03-02T13:44:44Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="CreateAddress(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:44:44Z" name="CreateAddress" finished-at="2020-03-02T13:44:47Z" depends-on-methods="com.api.tests.Address.CreateContactActivatedAndValidated" duration-ms="2766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Address.CreateAddress(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateAddress -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:44:47Z" name="afterMethod" finished-at="2020-03-02T13:44:47Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateAddress status=SUCCESS method=Address.CreateAddress(java.lang.reflect.Method)[pri:1, instance:com.api.tests.Address@ab20d7c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:30Z" name="beforeMethod" finished-at="2020-03-02T13:46:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="RetrieveAddresses(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:30Z" name="RetrieveAddresses" finished-at="2020-03-02T13:46:31Z" depends-on-methods="com.api.tests.Address.CreateAddress" duration-ms="934" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Address.RetrieveAddresses(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveAddresses -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:31Z" name="afterMethod" finished-at="2020-03-02T13:46:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveAddresses status=SUCCESS method=Address.RetrieveAddresses(java.lang.reflect.Method)[pri:2, instance:com.api.tests.Address@ab20d7c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="UpdateAddress(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:31Z" name="UpdateAddress" finished-at="2020-03-02T13:46:33Z" depends-on-methods="com.api.tests.Address.CreateAddress" duration-ms="1817" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Address.UpdateAddress(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateAddress -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:31Z" name="beforeMethod" finished-at="2020-03-02T13:46:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:33Z" name="afterMethod" finished-at="2020-03-02T13:46:33Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateAddress status=SUCCESS method=Address.UpdateAddress(java.lang.reflect.Method)[pri:3, instance:com.api.tests.Address@ab20d7c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="DeactivateAddress(java.lang.reflect.Method)[pri:4, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:40Z" name="DeactivateAddress" finished-at="2020-03-02T13:46:42Z" depends-on-methods="com.api.tests.Address.UpdateAddress" duration-ms="2304" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.api.tests.Address.DeactivateAddress(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeactivateAddress -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:40Z" name="beforeMethod" finished-at="2020-03-02T13:46:40Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.api.tests.Address@ab20d7c]" started-at="2020-03-02T13:46:42Z" name="afterMethod" finished-at="2020-03-02T13:46:42Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DeactivateAddress status=SUCCESS method=Address.DeactivateAddress(java.lang.reflect.Method)[pri:4, instance:com.api.tests.Address@ab20d7c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.api.tests.Address -->
    </test> <!-- CRM API Tests -->
  </suite> <!-- CRM API Automation Testing -->
</testng-results>
